/*
 * sipa driver debug defines
 *
 * Copyright (C) 2018-2019 Unisoc Corporation
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#ifndef __SIPA_ROC1_LINUX_DEBUG_H__
#define __SIPA_ROC1_LINUX_DEBUG_H__
#include <dt-bindings/soc/sprd,roc1-regs.h>

#include "sipa_priv.h"
#include "sipa_hal_priv.h"
#include "sipa_phy_v0/sipa_glb_phy.h"
#include "sipa_phy_v0/sipa_fifo_phy.h"

#define ROC1_AHB_MAX_REG		56
#define ORCA_AHB_MAX_REG		67

struct ipa_register_map {
	char *name;
	u32 offset;
	u32 size;
};

struct ipa_fifo_iterm_map {
	char *name;
	u32 offset;
};

struct sipa_register_data {
	const u32 ahb_regnum;
	const u32 apb_regnum;
	const u32 mpu_regnum;
	const struct ipa_register_map *ahb_reg;
	const struct ipa_register_map *apb_reg;
	const struct ipa_register_map *mpu_reg;
};

static const struct ipa_register_map sipa_orca_ahb_regmap[] = {
	{"IpaEb",
	 REG_AP_IPA_AHB_RF_AHB_EB, 16},
	{"IpaRst",
	 REG_AP_IPA_AHB_RF_AHB_RST, 8},
	{"IpaForceSleepCfg",
	 REG_AP_IPA_AHB_RF_AP_SYS_FORCE_SLEEP_CFG, 8},
	{"IpaUsbCtrl",
	 REG_AP_IPA_AHB_RF_USB1_CTRL, 16},
	{"IpaUsbdbg0",
	 REG_AP_IPA_AHB_RF_USB1_DBG0, 32},
	{"IpaUsbdbg1",
	 REG_AP_IPA_AHB_RF_USB1_DBG1, 32},
	{"IpaUsbdbg2",
	 REG_AP_IPA_AHB_RF_USB1_DBG2, 32},
	{"IpaPcieCtl0",
	 REG_AP_IPA_AHB_RF_PCIE_CTL0, 32},
	{"IpaPcieCtl1",
	 REG_AP_IPA_AHB_RF_PCIE_CTL1, 16},
	{"IpaPcieCtl2",
	 REG_AP_IPA_AHB_RF_PCIE_CTL2, 16},
	{"IpaPcieCtl3",
	 REG_AP_IPA_AHB_RF_PCIE_CTL3, 16},
	{"IpaPclkEb",
	 REG_AP_IPA_AHB_RF_APB_PCLK_AUTO_GATE_EB, 32},
	{"IpaPclkSel",
	 REG_AP_IPA_AHB_RF_APB_PCLK_AUTO_SLOW_SEL, 32},
	{"IpaSleepCfg",
	 REG_AP_IPA_AHB_RF_AP_SYS_AUTO_SLEEP_CFG, 32},
	{"IpaImtxM0",
	 REG_AP_IPA_AHB_RF_IMTX_M0_LPC, 32},
	{"IpaImtxM1",
	 REG_AP_IPA_AHB_RF_IMTX_M1_LPC, 32},
	{"IpaImtxM2",
	 REG_AP_IPA_AHB_RF_IMTX_M2_LPC, 32},
	{"IpaImtxM3",
	 REG_AP_IPA_AHB_RF_IMTX_M3_LPC, 32},
	{"IpaImtxM4",
	 REG_AP_IPA_AHB_RF_IMTX_M4_LPC, 32},
	{"IpaImtxM5",
	 REG_AP_IPA_AHB_RF_IMTX_M5_LPC, 32},
	{"IpaImtxM6",
	 REG_AP_IPA_AHB_RF_IMTX_M6_LPC, 32},
	{"IpaImtxM7",
	 REG_AP_IPA_AHB_RF_IMTX_M7_LPC, 32},
	{"IpaImtxM8",
	 REG_AP_IPA_AHB_RF_IMTX_M8_LPC, 32},
	{"IpaImtxM9",
	 REG_AP_IPA_AHB_RF_IMTX_M9_LPC, 32},
	{"IpaImtxMain",
	 REG_AP_IPA_AHB_RF_IMTX_MAIN_LPC, 32},
	{"IpaImtxS0",
	 REG_AP_IPA_AHB_RF_IMTX_S0_LPC, 32},
	{"IpaImtxS1",
	 REG_AP_IPA_AHB_RF_IMTX_S1_LPC, 32},
	{"IpaImtxS2",
	 REG_AP_IPA_AHB_RF_IMTX_S2_LPC, 32},
	{"IpaImtxS3",
	 REG_AP_IPA_AHB_RF_IMTX_S3_LPC, 32},
	{"IpaImtxS4",
	 REG_AP_IPA_AHB_RF_IMTX_S4_LPC, 32},
	{"IpaImtxS5",
	 REG_AP_IPA_AHB_RF_IMTX_S5_LPC, 32},
	{"IpaImtxS6",
	 REG_AP_IPA_AHB_RF_IMTX_S6_LPC, 32},
	{"IpaImtxS7",
	 REG_AP_IPA_AHB_RF_IMTX_S7_LPC, 32},
	{"IpaImtxS8",
	 REG_AP_IPA_AHB_RF_IMTX_S8_LPC, 32},
	{"IpaImtxS9",
	 REG_AP_IPA_AHB_RF_IMTX_S9_LPC, 32},
	{"IpaImtxLslp",
	 REG_AP_IPA_AHB_RF_IMTX_MST_FRC_LSLP, 32},
	{"IpaImtxLslpLpsBp",
	 REG_AP_IPA_AHB_RF_IMTX_LSLP_LPC_BYPASS, 32},
	{"IpaImtxMstDoze",
	 REG_AP_IPA_AHB_RF_IMTX_MST_FRC_DOZE, 32},
	{"IpaImtxDozeLpcBp",
	 REG_AP_IPA_AHB_RF_IMTX_DOZE_LPC_BYPASS, 32},
	{"IpaImtxAxiAllow0",
	 REG_AP_IPA_AHB_RF_IMTX_AXI_FREQ_ALLOW0, 32},
	{"IpaImtxAxiAllow1",
	 REG_AP_IPA_AHB_RF_IMTX_AXI_FREQ_ALLOW1, 32},
	{"IpaQos0",
	 REG_AP_IPA_AHB_RF_AP_QOS0, 32},
	{"IpaQos1",
	 REG_AP_IPA_AHB_RF_AP_QOS1, 32},
	{"IpaUrgency",
	 REG_AP_IPA_AHB_RF_AP_URGENCY, 32},
	{"IpaUser0",
	 REG_AP_IPA_AHB_RF_AP_USER0, 32},
	{"IpaUser1",
	 REG_AP_IPA_AHB_RF_AP_USER1, 32},
	{"IpaUser2",
	 REG_AP_IPA_AHB_RF_AP_USER2, 32},
	{"IpaImtxCtrl",
	 REG_AP_IPA_AHB_RF_IMTX_CTRL, 32},
	{"IpaIpaCtrl",
	 REG_AP_IPA_AHB_RF_IPA_CTRL, 32},
	{"IpaPamWifiCtrl",
	 REG_AP_IPA_AHB_RF_PAM_WIFI_CTRL, 32},
	{"IpaImtxM10Ctrl",
	 REG_AP_IPA_AHB_RF_IMTX_M10_CTRL, 32},
	{"IpaPcieLpCtrl",
	 REG_AP_IPA_AHB_RF_PCIE_LP_CTRL, 32},
	{"IpaImtxPuNum0",
	 REG_AP_IPA_AHB_RF_IMTX_PU_NUM0, 32},
	{"IpaImtxPuNum1",
	 REG_AP_IPA_AHB_RF_IMTX_PU_NUM1, 32},
	{"IpaImtxPuNum2",
	 REG_AP_IPA_AHB_RF_IMTX_PU_NUM2, 32},
	{"IpaImtxPuNum3",
	 REG_AP_IPA_AHB_RF_IMTX_PU_NUM3, 32},
	{"IpaImtxPuNum4",
	 REG_AP_IPA_AHB_RF_IMTX_PU_NUM4, 32},
	{"IpaImtxPuNum5",
	 REG_AP_IPA_AHB_RF_IMTX_PU_NUM5, 32},
	{"IpaPamWifiDfs",
	 REG_AP_IPA_AHB_RF_PAM_WIFI_PCLK_DFS_CTRL, 32},
	{"IpaPcieCtrl",
	 REG_AP_IPA_AHB_RF_PCIE_CTRL, 32},
	{"IpaSysAccessEn",
	 REG_AP_IPA_AHB_RF_SYS_ACCESS_EN, 32},
	{"IpaCgmGateEn",
	 REG_AP_IPA_AHB_RF_CGM_GATE_EN, 32},
	{"IpaIpBusyGateEn",
	 REG_AP_IPA_AHB_RF_IP_BUSY_GATE_EN, 32},
	{"IpaSdslvCtrl",
	 REG_AP_IPA_AHB_RF_SDSLV_CTRL, 32},
	{"IpaPcieSwMsiInt",
	 REG_AP_IPA_AHB_RF_PCIE_SW_MSI_INT, 32},
	{"IpaReserve0",
	 REG_AP_IPA_AHB_RF_RESERVE0, 32},
	{"IpaReserve1",
	 REG_AP_IPA_AHB_RF_RESERVE1, 32}
};

static const struct ipa_register_map sipa_roc1_ahb_regmap[] = {
	{"IpaRst",
	 REG_IPA_AHB_IPA_RST, 16},
	{"IpaEb",
	 REG_IPA_AHB_IPA_EB, 8},
	{"IpaPcie3Ctl0",
	 REG_IPA_AHB_PCIE3_CTL0, 8},
	{"IpaPcie2Ctl0",
	 REG_IPA_AHB_PCIE2_CTL0, 16},
	{"IpaUsbCtl0",
	 REG_IPA_AHB_USB_CTL0, 32},
	{"IpaM0Lpc",
	 REG_IPA_AHB_M0_LPC, 32},
	{"IpaM1Lpc",
	 REG_IPA_AHB_M1_LPC, 32},
	{"IpaM2Lpc",
	 REG_IPA_AHB_M2_LPC, 32},
	{"IpaM3Lpc",
	 REG_IPA_AHB_M3_LPC, 16},
	{"IpaM4Lpc",
	 REG_IPA_AHB_M4_LPC, 16},
	{"IpaM5Lpc",
	 REG_IPA_AHB_M5_LPC, 16},
	{"IpaM6Lpc",
	 REG_IPA_AHB_M6_LPC, 32},
	{"IpaM7Lpc",
	 REG_IPA_AHB_M7_LPC, 32},
	{"IpaMailMtxLpc",
	 REG_IPA_AHB_MAIN_MTX_LPC, 32},
	{"IpaS0Lpc",
	 REG_IPA_AHB_S0_LPC, 32},
	{"IpaS1Lpc",
	 REG_IPA_AHB_S1_LPC, 32},
	{"IpaS2Lpc",
	 REG_IPA_AHB_S2_LPC, 32},
	{"IpaS3Lpc",
	 REG_IPA_AHB_S3_LPC, 32},
	{"IpaS4Lpc",
	 REG_IPA_AHB_S4_LPC, 32},
	{"IpaS5Lpc",
	 REG_IPA_AHB_S5_LPC, 32},
	{"IpaS6Lpc",
	 REG_IPA_AHB_S6_LPC, 32},
	{"IpaS7Lpc",
	 REG_IPA_AHB_S7_LPC, 32},
	{"IpaS8Lpc",
	 REG_IPA_AHB_S8_LPC, 32},
	{"IpaAsyncG2Lpc",
	 REG_IPA_AHB_ASYNC_BRG_G2_LPC, 32},
	{"IpaAsyncG3Lpc",
	 REG_IPA_AHB_ASYNC_BRG_G3_LPC, 32},
	{"IpaMtxQos0",
	 REG_IPA_AHB_MTX_QOS_0, 32},
	{"IpaMtxQos1",
	 REG_IPA_AHB_MTX_QOS_1, 32},
	{"IpaMatrixLpcCtrl",
	 REG_IPA_AHB_MATRIX_LPC_CTRL, 32},
	{"IpaMtxFreqAllow",
	 REG_IPA_AHB_IPA_MTX_FREQ_ALLOW, 32},
	{"IpaMtxFreqLslpAllow",
	 REG_IPA_AHB_IPA_MTX_FREQ_LSLP_ALLOW, 32},
	{"IpaMiscCfg",
	 REG_IPA_AHB_MISC_CFG, 32},
	{"IpaSysStatus",
	 REG_IPA_AHB_IPA_SYS_STATUS, 32},
	{"IpaAp2IpaSignalR",
	 REG_IPA_AHB_AP2IPA_BRIDGE_DEBUG_SIGNAL_R, 32},
	{"IpaGen2SignalW",
	 REG_IPA_AHB_GEN2_BRIDGE_DEBUG_SIGNAL_W, 32},
	{"IpaGen3SignalW",
	 REG_IPA_AHB_GEN3_BRIDGE_DEBUG_SIGNAL_W, 32},
	{"IpaUsb3Debug0",
	 REG_IPA_AHB_USB3_DEBUG_0, 32},
	{"IpaUsb3Debug1",
	 REG_IPA_AHB_USB3_DEBUG_1, 32},
	{"IpaUsb3Debug2",
	 REG_IPA_AHB_USB3_DEBUG_2, 32},
	{"IpaPcie2Debug",
	 REG_IPA_AHB_PCIE2_DEBUG, 32},
	{"IpaPcie3Debug",
	 REG_IPA_AHB_PCIE3_DEBUG, 32},
	{"IpaCm4SysRst",
	 REG_IPA_AHB_CM4_SYS_SOFT_RST, 32},
	{"IpaCm4CoreCfg1",
	 REG_IPA_AHB_CM4_CORE_CFG1, 32},
	{"IpaCm4CoreSysTickCfg",
	 REG_IPA_AHB_CM4_CORE_SYSTICK_CFG, 32},
	{"IpaCm4CoreAuxFaultCfg",
	 REG_IPA_AHB_CM4_CORE_AUXFAULT_CFG, 32},
	{"IpaCm4MainStatout",
	 REG_IPA_AHB_CM4_MAIN_STATOUT, 32},
	{"IpaCm4IntStat",
	 REG_IPA_AHB_CM4_INT_STAT, 32},
	{"IPaCm4WdgRstFlag",
	 REG_IPA_AHB_CM4_WDG_RST_FLAG, 32},
	{"IpaCm4IcacheCtrlReg",
	 REG_IPA_AHB_CM4_ICACHE_CTRL_REG, 32},
	{"IpaCm4DcacheCtrlReg",
	 REG_IPA_AHB_CM4_DCACHE_CTRL_REG, 32},
	{"IpaCm4IportRemapCtrl",
	 REG_IPA_AHB_CM4_IPORT_REMAP_CTRL_REG, 32},
	{"IpaCm4DportRemapCtrl",
	 REG_IPA_AHB_CM4_DPORT_REMAP_CTRL_REG, 32},
	{"IpaCm4SportRemapCtrl",
	 REG_IPA_AHB_CM4_SPORT_REMAP_CTRL_REG, 32},
	{"IpaInt2apStatus",
	 REG_IPA_AHB_INT_TO_AP_STATUS_REG, 32},
	{"IpaInt2Cm4Status",
	 REG_IPA_AHB_INT_TO_CM4_STATUS_REG, 32},
	{"IpaInt2ApEn",
	 REG_IPA_AHB_INT_TO_AP_EN_REG, 32},
	{"IpaInt2Cm4En",
	 REG_IPA_AHB_INT_TO_CM4_EN_REG, 32}
};

static const struct ipa_register_map sipa_glb_regmap[] = {
	{"IPA_MODE_N_FLOWCTRL",
	 IPA_MODE_N_FLOWCTRL, 32},
	{"IPA_USB_SDIO_FLOWCTL_SRC",
	 IPA_USB_SDIO_FLOWCTL_SRC, 32},
	{"IPA_MAP_RX_DL_PCIE_UL_FLOWCTL_SRC",
	 IPA_MAP_RX_DL_PCIE_UL_FLOWCTL_SRC, 32},
	{"IPA_PCIE_CH0_1_DL_FLOWCTL_SRC",
	 IPA_PCIE_CH0_1_DL_FLOWCTL_SRC, 32},
	{"IPA_PCIE_CH2_3_DL_FLOWCTL_SRC",
	 IPA_PCIE_CH2_3_DL_FLOWCTL_SRC, 32},
	{"IPA_CP_MAP_TX_UL_FLOWCTL_SRC",
	 IPA_CP_MAP_TX_UL_FLOWCTL_SRC, 32},
	{"IPA_MAP_PCIE_CH0_1_UL_FLOWCTL_SRC",
	 IPA_MAP_PCIE_CH0_1_UL_FLOWCTL_SRC, 32},
	{"IPA_MAP_PCIE_CH2_3_UL_FLOWCTL_SRC",
	 IPA_MAP_PCIE_CH2_3_UL_FLOWCTL_SRC, 32},
	{"IPA_MAP_PCIE_CH2_3_UL_FLOWCTL_SRC",
	 IPA_MAP_PCIE_CH2_3_UL_FLOWCTL_SRC, 32},
	{"IPA_AXI_OUTSTANDING_N_CG",
	 IPA_AXI_OUTSTANDING_N_CG, 32},
	{"IPA_CACHE_QOS_PROT_CFG",
	 IPA_CACHE_QOS_PROT_CFG, 32},
	{"IPA_HASH_TIMESTEP",
	 IPA_HASH_TIMESTEP, 32},
	{"IPA_SW_DEBUG_MEM_ADDRL",
	 IPA_SW_DEBUG_MEM_ADDRL, 32},
	{"IPA_INTERNAL_FIFO_CLR",
	 IPA_INTERNAL_FIFO_CLR, 32},
	{"IPA_AXI_MST_CHN_PRIORITY",
	 IPA_AXI_MST_CHN_PRIORITY, 32},
	{"IPA_MAP_INTERRUPT_SRC_EN",
	 IPA_MAP_INTERRUPT_SRC_EN, 32},
	{"IPA_MAP_INTERRUPT_STATUS",
	 IPA_MAP_INTERRUPT_STATUS, 32},
	{"IPA_CP_CONFIGURATION",
	 IPA_CP_CONFIGURATION, 32},
	{"IPA_CP_DL_DROP_CNT",
	 IPA_CP_DL_DROP_CNT, 32},
	{"IPA_CP_UL_DROP_CNT",
	 IPA_CP_UL_DROP_CNT, 32},
	{"IPA_CP_DL_UL_FLOW_CTL_WATERMARK",
	 IPA_CP_DL_UL_FLOW_CTL_WATERMARK, 32},
	{"IPA_USB_SDIO_FLOWCTL_SRC_STS",
	 IPA_USB_SDIO_FLOWCTL_SRC_STS, 32},
	{"IPA_MAP_RX_DL_PCIE_DL_FLOWCTL_SRC_STS",
	 IPA_MAP_RX_DL_PCIE_DL_FLOWCTL_SRC_STS, 32},
	{"IPA_PCIE_CH0_1_DL_FLOWCTL_SRC_STS",
	 IPA_PCIE_CH0_1_DL_FLOWCTL_SRC_STS, 32},
	{"IPA_PCIE_CH2_3_DL_FLOWCTL_SRC_STS",
	 IPA_PCIE_CH2_3_DL_FLOWCTL_SRC_STS, 32},
	{"IPA_CP_MAP_TX_UL_FLOWCTL_SRC_STS",
	 IPA_CP_MAP_TX_UL_FLOWCTL_SRC_STS, 32},
	{"IPA_MAP_PCIE_CH0_1_UL_FLOWCTL_SRC_STS",
	 IPA_MAP_PCIE_CH0_1_UL_FLOWCTL_SRC_STS, 32},
	{"IPA_MAP_PCIE_CH2_3_UL_FLOWCTL_SRC_STS",
	 IPA_MAP_PCIE_CH2_3_UL_FLOWCTL_SRC_STS, 32},
	{"IPA_WIFI_WIAP_DL_FLOWCTL_SRC_STS",
	 IPA_WIFI_WIAP_DL_FLOWCTL_SRC_STS, 32},
	{"IPA_HASH_TABLE_BASE_ADDR_LOW",
	 IPA_HASH_TABLE_BASE_ADDR_LOW, 32},
	{"IPA_HASH_TABLE_SWITCH_CTL",
	 IPA_HASH_TABLE_SWITCH_CTL, 32}
};

static const struct ipa_register_map sipa_fifo_iterm_map[] = {
	{"IPA_COMMON_RX_FIFO_DEPTH",
	 IPA_COMMON_RX_FIFO_DEPTH, 32},
	{"IPA_COMMON_RX_FIFO_WR",
	 IPA_COMMON_RX_FIFO_WR, 32},
	{"IPA_COMMON_RX_FIFO_RD",
	 IPA_COMMON_RX_FIFO_RD, 32},
	{"IPA_COMMON_TX_FIFO_DEPTH",
	 IPA_COMMON_TX_FIFO_DEPTH, 32},
	{"IPA_COMMON_TX_FIFO_WR",
	 IPA_COMMON_TX_FIFO_WR, 32},
	{"IPA_COMMON_TX_FIFO_RD",
	 IPA_COMMON_TX_FIFO_RD, 32},
	{"IPA_COMMON_RX_FIFO_ADDRL",
	 IPA_COMMON_RX_FIFO_ADDRL, 32},
	{"IPA_COMMON_RX_FIFO_ADDRH",
	 IPA_COMMON_RX_FIFO_ADDRH, 32},
	{"IPA_COMMON_TX_FIFO_ADDRL",
	 IPA_COMMON_TX_FIFO_ADDRL, 32},
	{"IPA_COMMON_TX_FIFO_ADDRH",
	 IPA_COMMON_TX_FIFO_ADDRH, 32},
	{"IPA_PERFETCH_FIFO_CTL",
	 IPA_PERFETCH_FIFO_CTL, 32},
	{"IPA_INT_GEN_CTL_TX_FIFO_VALUE",
	 IPA_INT_GEN_CTL_TX_FIFO_VALUE, 32},
	{"IPA_INT_GEN_CTL_EN",
	 IPA_INT_GEN_CTL_EN, 32},
	{"IPA_DROP_PACKET_CNT",
	 IPA_DROP_PACKET_CNT, 32},
	{"IPA_FLOW_CTRL_CONFIG",
	 IPA_FLOW_CTRL_CONFIG, 32},
	{"IPA_TX_FIFO_FLOW_CTRL",
	 IPA_TX_FIFO_FLOW_CTRL, 32},
	{"IPA_RX_FIFO_FLOW_CTRL",
	 IPA_RX_FIFO_FLOW_CTRL, 32},
	{"IPA_RX_FIFO_FULL_NEG_PULSE_NUM",
	 IPA_RX_FIFO_FULL_NEG_PULSE_NUM, 32},
	{"IPA_INT_GEN_CTL_CLR",
	 IPA_INT_GEN_CTL_CLR, 32},
	{"IPA_INTR_RX_FIFO_FULL_ADDR_HIGH",
	 IPA_INTR_RX_FIFO_FULL_ADDR_HIGH, 32},
	{"IPA_INTR_MEM_WR_ADDR_LOW",
	 IPA_INTR_MEM_WR_ADDR_LOW, 32},
	{"IPA_RXFIFO_FULL_MEM_WR_ADDR_LOW",
	 IPA_RXFIFO_FULL_MEM_WR_ADDR_LOW, 32},
	{"IPA_INTR_MEM_WR_PATTERN",
	 IPA_INTR_MEM_WR_PATTERN, 32},
	{"IPA_RX_FIFO_FULL_MEM_WR_PATTERN",
	 IPA_RX_FIFO_FULL_MEM_WR_PATTERN, 32},
	{"IPA_TX_FIFO_WR_INIT",
	 IPA_TX_FIFO_WR_INIT, 32},
	{"IPA_COMMON_RX_FIFO_AXI_STS",
	 IPA_COMMON_RX_FIFO_AXI_STS, 32},
	{"IPA_ERRCODE_INT_ADDR_LOW",
	 IPA_ERRCODE_INT_ADDR_LOW, 32},
	{"IPA_ERRCODE_INT_PATTERN",
	 IPA_ERRCODE_INT_PATTERN, 32},
};

static const struct ipa_fifo_iterm_map sipa_common_fifo_map[] = {
	{"SIPA_FIFO_USB_UL",
	 SIPA_FIFO_USB_UL_OFFSET},
	{"SIPA_FIFO_SDIO_UL",
	 SIPA_FIFO_SDIO_UL_OFFSET},
	{"SIPA_FIFO_AP_IP_UL",
	 SIPA_FIFO_AP_IP_UL_OFFSET},
	{"SIPA_FIFO_PCIE_UL",
	 SIPA_FIFO_PCIE_UL_OFFSET},
	{"SIPA_FIFO_REMOTE_PCIE_CTRL0_UL",
	 SIPA_FIFO_REMOTE_PCIE_CTRL0_UL_OFFSET},
	{"SIPA_FIFO_REMOTE_PCIE_CTRL1_UL",
	 SIPA_FIFO_REMOTE_PCIE_CTRL1_UL_OFFSET},
	{"SIPA_FIFO_REMOTE_PCIE_CTRL2_UL",
	 SIPA_FIFO_REMOTE_PCIE_CTRL2_UL_OFFSET},
	{"SIPA_FIFO_REMOTE_PCIE_CTRL3_UL",
	 SIPA_FIFO_REMOTE_PCIE_CTRL3_UL_OFFSET},
	{"SIPA_FIFO_AP_ETH_DL",
	 SIPA_FIFO_AP_ETH_DL_OFFSET},
	{"SIPA_FIFO_LOCAL_PCIE_CTRL0_DL",
	 SIPA_FIFO_LOCAL_PCIE_CTRL0_DL_OFFSET},
	{"SIPA_FIFO_LOCAL_PCIE_CTRL1_DL",
	 SIPA_FIFO_LOCAL_PCIE_CTRL1_DL_OFFSET},
	{"SIPA_FIFO_LOCAL_PCIE_CTRL2_DL",
	 SIPA_FIFO_LOCAL_PCIE_CTRL2_DL_OFFSET},
	{"SIPA_FIFO_LOCAL_PCIE_CTRL3_DL",
	 SIPA_FIFO_LOCAL_PCIE_CTRL3_DL_OFFSET},
	{"SIPA_FIFO_WIFI_UL",
	 SIPA_FIFO_WIFI_UL_OFFSET},
	{"SIPA_FIFO_CP_DL",
	 SIPA_FIFO_CP_DL_OFFSET},
	{"SIPA_FIFO_USB_DL",
	 SIPA_FIFO_USB_DL_OFFSET},
	{"SIPA_FIFO_SDIO_DL",
	 SIPA_FIFO_SDIO_DL_OFFSET},
	{"SIPA_FIFO_AP_IP_DL",
	 SIPA_FIFO_AP_IP_DL_OFFSET},
	{"SIPA_FIFO_PCIE_DL",
	 SIPA_FIFO_PCIE_DL_OFFSET},
	{"SIPA_FIFO_REMOTE_PCIE_CTRL0_DL",
	 SIPA_FIFO_REMOTE_PCIE_CTRL0_DL_OFFSET},
	{"SIPA_FIFO_REMOTE_PCIE_CTRL1_DL",
	 SIPA_FIFO_REMOTE_PCIE_CTRL1_DL_OFFSET},
	{"SIPA_FIFO_REMOTE_PCIE_CTRL2_DL",
	 SIPA_FIFO_REMOTE_PCIE_CTRL2_DL_OFFSET},
	{"SIPA_FIFO_REMOTE_PCIE_CTRL3_DL",
	 SIPA_FIFO_REMOTE_PCIE_CTRL3_DL_OFFSET},
	{"SIPA_FIFO_AP_ETH_UL",
	 SIPA_FIFO_AP_ETH_UL_OFFSET},
	{"SIPA_FIFO_LOCAL_PCIE_CTRL0_UL",
	 SIPA_FIFO_LOCAL_PCIE_CTRL0_UL_OFFSET},
	{"SIPA_FIFO_LOCAL_PCIE_CTRL1_UL",
	 SIPA_FIFO_LOCAL_PCIE_CTRL1_UL_OFFSET},
	{"SIPA_FIFO_LOCAL_PCIE_CTRL2_UL",
	 SIPA_FIFO_LOCAL_PCIE_CTRL2_UL_OFFSET},
	{"SIPA_FIFO_LOCAL_PCIE_CTRL3_UL",
	 SIPA_FIFO_LOCAL_PCIE_CTRL3_UL_OFFSET},
	{"SIPA_FIFO_WIFI_DL",
	 SIPA_FIFO_WIFI_DL_OFFSET},
	{"SIPA_FIFO_CP_UL",
	 SIPA_FIFO_CP_UL_OFFSET},
	{"SIPA_CACHE_LINE_CTRL_AND_STS",
	 SIPA_CACHE_LINE_CTRL_AND_STS_OFFSET}
};

extern struct sipa_hal_context sipa_hal_ctx;
extern struct sipa_plat_drv_cfg s_sipa_cfg;
void sipa_dbg(struct sipa_plat_drv_cfg *sipa, const char *fmt, ...);
#ifdef CONFIG_DEBUG_FS
int sipa_init_debugfs(struct sipa_plat_drv_cfg *sipa,
		      struct sipa_control *ctrl);
void sipa_exit_debugfs(struct sipa_plat_drv_cfg *sipa);
#else
static inline int sipa_init_debugfs(struct sipa_plat_drv_cfg *sipa)
{
	return 0;
}

static inline void sipa_exit_debugfs(struct sipa_plat_drv_cfg *sipa)
{
}
#endif

#endif /*  __SIPA_ROC1_LINUX_DEBUG_H__ */
